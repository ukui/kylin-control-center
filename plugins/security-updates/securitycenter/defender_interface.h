/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c defender_interface -p defender_interface.h:defender_interface.cpp ../dbus_xml/KscDefender.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DEFENDER_INTERFACE_H
#define DEFENDER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include <ksc_business_def.h>

/*
 * Proxy class for interface com.ksc.defender.securitycenter
 */
class defender_interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.ksc.defender.securitycenter"; }

public:
    defender_interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~defender_interface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int, ksc_defender_module_list> get_kylin_security_center_modules()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("get_kylin_security_center_modules"), argumentList);
    }
    inline QDBusReply<int> get_kylin_security_center_modules(ksc_defender_module_list &items)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("get_kylin_security_center_modules"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            items = qdbus_cast<ksc_defender_module_list>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<int> set_kylin_security_modules_change(int module_type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(module_type);
        return asyncCallWithArgumentList(QStringLiteral("set_kylin_security_modules_change"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void kylin_security_center_module_changed(ksc_defender_module module);
};

namespace com {
  namespace ksc {
    namespace defender {
      typedef ::defender_interface securitycenter;
    }
  }
}
#endif
